import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id "base"
}

//properties
task base << {
    println "$buildFile.name in '$buildFile.parentFile.name'."
    println name
    println project.name
}

//task depends
task taskD1 << {
    println 'compiling source #1'
}

task taskD2(dependsOn: taskD1) << {
    println 'compiling unit tests #2'
}

task taskD3(dependsOn: [taskD1, taskD2]) << {
    println 'running unit tests #3'
}

//configured
task configured {
    doFirst {
        println 'This is 2'
    }
    doLast {
        println 'This is 3'
    }
    println 'This is 1'
}

//Evaluate
ext.hasTests = true
allprojects {
    afterEvaluate { project ->
        if (project.hasTests) {
            println "Adding test task to $project"
            project.task('evaluate') {
                doLast {
                    println "Running tests for $project"
                }
            }
        }
    }
}
tasks.whenTaskAdded { task ->
    if (task.name.equals('mockableAndroidJar')) {
        task.enabled = false
    }
}

//files
task collect {
    doLast {
        File srcDir

        // Create a file collection using a closure
        FileCollection collection = files { srcDir.listFiles() }

        srcDir = file('otherGradle')
        println "Contents of $srcDir.name"
        collection.collect { relativePath(it) }.each { println it }

        collection.each {
            println relativePath(it)
        }
    }
}
task zipTree{
    doLast{
        def input='build/libs/freemarker.jar'
        zipTree(input).getFiles().each {
            println relativePath(it)
        }
    }
}
task dir{
    mkdir("publish/ftl")
    mkdir("publish/config")
    delete("publish")
}
task fileContent{
//    def qarthVersion = file("javaModule/src/com/qihoo/qarth/Test.java")
//    def firstSearch = true
//    def versionName = "0.0.0"
//    qarthVersion.eachLine { line ->
//        if (line.contains('QARTH_VERSION') && firstSearch) {
//            firstSearch = false
//            def first = line.indexOf('"')
//            def last = line.lastIndexOf('"')
//            versionName = line.substring(first+1, last)
//            return
//        }
//    }
//    println("versionName="+versionName)
}
/// file content rewrite,enableDebug/disableDebug are added in app configration
static def fileRead(file, oldStr, newStr) {
    def readerString = "";
    file.withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.find(oldStr)) {
                it = it.replace(oldStr, newStr)
            }
            readerString <<= it
            readerString << '\n'
        }
        return readerString
    }
}
static def fileWrite(file, stringBuffer) {
    file.withWriter('UTF-8') { within ->
        within.append(stringBuffer)
    }
}
task enableDebug << {
    def debugF = file('java/com/qihoo/hotfix/Debug.java')
    def strBuffer = fileRead(debugF , "LOG_DEBUG = false", "LOG_DEBUG = true");
    fileWrite(debugF, strBuffer);
}
task disableDebug << {
    def debugF = file('java/com/qihoo/hotfix/Debug.java')
    def strBuffer = fileRead(debugF , "LOG_DEBUG = true", "LOG_DEBUG = false");
    fileWrite(debugF, strBuffer);
}

//other test
task other<<{
//    def md5="2de10f66f6aa235aa741c23f8f64d3f1"
//
//    Pattern pattern = Pattern.compile("^[0-9a-z]{32}\$")
//    Matcher matcher = pattern.matcher(md5)
//    def ret= matcher.matches()
//
//    println(ret)
}